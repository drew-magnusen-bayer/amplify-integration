const _ = require("lodash")
const vaultClient = require("./vaultClient")
const vaultCfServices = require("@monsantoit/vault-cf-services")

const getVaultPasswordParams = async (params) => {
  const requiredParams = ["clientId", "vaultSecretPath", "vaultRole"]
  if (!params.authProvider || params.authProvider === "ping") {
    requiredParams.push("environment")
  }

  const missingParam = _.find(requiredParams.sort(), (param) => !params[param])
  if (missingParam) {
    throw new Error(`${missingParam} is required!`)
  }

  const vault = await vaultClient.create(params.vaultRole)
  const secretStore = { CLIENT_SECRET: params.vaultSecretPath }
  await vaultCfServices.injectVaultIntoObject(secretStore, vault)

  const opts = {
    CLIENT_ID: params.clientId,
    CLIENT_SECRET: secretStore.CLIENT_SECRET,
  }

  if (!_.isEqual(params.authProvider, "azure")) {
    opts.PING_URL =
      params.environment === "prod"
        ? "https://amp.monsanto.com/as/token.oauth2"
        : "https://test.amp.monsanto.com/as/token.oauth2"
  } else {
    opts.AZURE_URL =
      "https://login.microsoftonline.com/fcb2b37b-5da0-466b-9b83-0014b67a7c78/oauth2/v2.0/token"
  }

  return opts
}

const getSuppliedPasswordParams = async (params) => {
  const requiredParams = ["clientId"]
  if (!params.authProvider || params.authProvider === "ping") {
    requiredParams.push("environment")
  }

  const missingParam = _.find(requiredParams.sort(), (param) => !params[param])
  if (missingParam) {
    throw new Error(`${missingParam} is required!`)
  }

  const opts = {
    CLIENT_ID: params.clientId,
    CLIENT_SECRET: params.clientSecret,
  }

  if (!_.isEqual(params.authProvider, "azure")) {
    opts.PING_URL =
      params.environment === "prod"
        ? "https://amp.monsanto.com/as/token.oauth2"
        : "https://test.amp.monsanto.com/as/token.oauth2"
  } else {
    opts.AZURE_URL =
      "https://login.microsoftonline.com/fcb2b37b-5da0-466b-9b83-0014b67a7c78/oauth2/v2.0/token"
  }

  return opts
}

module.exports = {
  retrieve: (params) => {
    return !params.clientSecret //
      ? getVaultPasswordParams(params)
      : getSuppliedPasswordParams(params)
  },
}
