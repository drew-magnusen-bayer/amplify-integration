const injectVaultIntoCloudFoundryServices = lib.require('injectVaultIntoCloudFoundryServices');

describe('inject vault into cloud foundry services', () => {

	let {services, injectVault, getVault, vaultUrl, credentials, vault} = {};

	beforeEach(() => {
		services = {a: 'A'};
		vault = {vault: 'vault'};
		injectVault = sinon.stub().resolves({});
		getVault = sinon.stub().resolves(vault);
		vaultUrl = 'https://vault';
		credentials = {
			role_id: 'role',
			secret_id: 'secret'
		};
		mockery.registerMock('./getVault', getVault);
		mockery.registerMock('./injectVaultIntoObject', injectVault);
	});

	afterEach(() => {
		mockery.deregisterMock('./getVault');
		mockery.deregisterMock('./injectVaultIntoObject');
	});

	it('successfully', () => {
		return injectVaultIntoCloudFoundryServices(vaultUrl, credentials, services).then(() => {
			getVault.calledWith(vaultUrl, credentials).should.equal(true);
			injectVault.calledWith(services, vault);
		});
	});

	describe('fails because', () => {
		function checkFailure(expectedMessage) {
			return injectVaultIntoCloudFoundryServices(vaultUrl, credentials, services).then(() => {
				should.fail();
			}).catch((err) => {
				err.should.equal(expectedMessage);
			})
		}

		it('undefined vaulturl', () => {
			vaultUrl = undefined;
			return checkFailure('Missing vault url!');
		});
		it('empty vaulturl', () => {
			vaultUrl = '';
			return checkFailure('Missing vault url!');
		});
		it('undefined credentials', () => {
			credentials = undefined;
			return checkFailure('Missing credentials object (should have role_id and secret_id)!');
		});
		it('missing credentials.role_id', () => {
			credentials.role_id = undefined;
			return checkFailure('Missing credentials.role_id!');
		});
		it('missing credentials.secret_id', () => {
			credentials.secret_id = undefined;
			return checkFailure('Missing credentials.secret_id!');

		});
		it('empty credentials.role_id', () => {
			credentials.role_id = '';
			return checkFailure('Missing credentials.role_id!');
		});
		it('empty credentials.secret_id', () => {
			credentials.secret_id = '';
			return checkFailure('Missing credentials.secret_id!');
		});
	});
});