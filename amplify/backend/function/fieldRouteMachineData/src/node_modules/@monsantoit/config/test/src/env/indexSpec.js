const env = require('../../../src/env')

describe('environment helpers', () => {
    describe('environment flags', () => {
        const originalEnv = process.env.NODE_ENV

        afterEach(() => {
            process.env.NODE_ENV = originalEnv
        })

        it('inDevelopment returns true when process.env.NODE_ENV is development', () => {
            process.env.NODE_ENV = 'development'
            env.inDevelopment.should.eql(true)
        })

        it('inTest returns true when process.env.NODE_ENV is test', () => {
            process.env.NODE_ENV = 'test'
            env.inTest.should.eql(true)
        })

        it('inProduction returns true when process.env.NODE_ENV is production', () => {
            process.env.NODE_ENV = 'production'
            env.inProduction.should.eql(true)
        })

        it('inIntegrationTest returns true when process.env.NODE_ENV is integration-test', () => {
            process.env.NODE_ENV = 'integration-test'
            env.inIntegrationTest.should.eql(true)
        })
    })

    describe('environment combinators', () => {
        const originalEnv = process.env.NODE_ENV

        beforeEach(() => {
            process.env.NODE_ENV = 'development'
        })

        afterEach(() => {
            process.env.NODE_ENV = originalEnv
        })

        describe('any', () => {
            it('returns true if any items are true', () => {
                env.any(env.inIntegrationTest, 'development', env.inTest).should.eql(true)
            })

            it('returns false if none are true', () => {
                env.any(env.inIntegrationTest, env.inTest).should.eql(false)
            })
        })

        describe('all', () => {
            it('returns true if every item is true', () => {
                env.all(env.inDevelopment, 'development').should.eql(true)
            })

            it('returns false if any are false', () => {
                env.all(env.inIntegrationTest, env.inTest).should.eql(false)
            })
        })

        describe('not', () => {
            it('returns false if any items are true', () => {
                env.not(env.inDevelopment, env.inTest).should.eql(false)
                env.not(false, false, true).should.eql(false)
            })

            it('returns true if all are false', () => {
                env.not(env.inIntegrationTest, env.inProduction, env.inTest).should.eql(true)
            })
        })
    })
})
