const _ = require('lodash')

module.exports = {
    findValuesWithPrefix(config, prefix) {
        return Object.keys(config).reduce((memo, key) => {
            const value = config[key]

            if (_.isString(value) && value.startsWith(prefix)) {
                memo.push(value.substr(prefix.length))
            } else if (_.isObject(value)) {
                memo.push(...this.findValuesWithPrefix(value, prefix))
            }
            return memo
        }, [])
    },

    replaceValuesWithPrefix(config, replacementMap, prefix) {
        Object.keys(config).forEach((key) => {
            const originalValue = config[key]

            if (_.isString(originalValue)) {
                const found = replacementMap[originalValue.substr(prefix.length)]
                if (found) {
                    // eslint-disable-next-line no-param-reassign
                    config[key] = found
                }
            } else if (_.isObject(originalValue)) {
                this.replaceValuesWithPrefix(originalValue, replacementMap, prefix)
            }
        })

        return config
    }
}
