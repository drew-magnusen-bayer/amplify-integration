/* eslint-disable no-case-declarations */
const fromPairs = require('lodash/fromPairs')
const toPairs = require('lodash/toPairs')
const get = require('lodash/get')
const authenticators = require('./authenticators')
// TODO: MapValues instead of just handling single params.

module.exports = {
    async vaultClient({url = 'https://vault.agro.services', auth}) {
        switch (auth.type) {
            case 'awsRole':
                return authenticators.getAWSClient(url, auth.roleName)
            case 'local':
                return authenticators.getLocalTokenClient(url)
            case 'appRole':
                return authenticators.getAppRoleClient(url, auth.roleId, auth.secretId)
            case 'auto':
                return authenticators.getAnyClient(url, auth)
            default:
                throw new Error(
                    'invalid configuration. Please specify `awsRole`, `local`, or `appRole` auth configuration.'
                )
        }
    },

    readVaultPaths(client, paths) {
        return Promise.all(
            toPairs(paths).map(([key, secretPath]) =>
                client.read(secretPath).then(({data}) => [key, data])
            )
        ).then((list) => fromPairs(list))
    },

    async readValues(client, paths) {
        const errors = []
        const pairs = await Promise.all(
            paths.map(async (path) => {
                let value
                try {
                    const split = path.split('/')
                    const key = split.pop()
                    const result = await client.read(split.join('/'))
                    const resultPath = path.startsWith('kv') ? ['data', 'data', key] : ['data', key]
                    value = get(result, resultPath)
                    if (value === undefined) {
                        throw new Error(`No property at path ${path}`)
                    }
                } catch (error) {
                    console.error(error)
                    errors.push(path)
                }

                return [path, value]
            })
        )
        if (errors.length > 0) {
            throw new Error(
                `The following vault paths were inaccessible, or contained no data: ${errors.join(
                    ', '
                )}`
            )
        }
        return fromPairs(pairs)
    }
}
