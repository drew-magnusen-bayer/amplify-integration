const paramStore = require('../../../../src/processors/aws/paramStore')
const ssm = require('../../../../src/processors/aws/ssmInstance')

describe('paramStore', () => {
    const sandbox = sinon.createSandbox()
    let ssmPromiseStub

    beforeEach(() => {
        ssmPromiseStub = sandbox.stub()
        ssmPromiseStub.resolves({
            Parameters: [
                {Name: '/test-a', Value: 'resolved test-a'},
                {Name: '/test-b', Value: 'resolved test-b'},
                {Name: '/test-c', Value: 'resolved test-c'}
            ]
        })
        sandbox.stub(ssm, 'getParameters').returns({promise: () => ssmPromiseStub()})
    })
    afterEach(() => {
        sandbox.restore()
    })

    it('appends param-store-required leading slashes to provided names if not present', async () => {
        await paramStore.getSSMParameters(['test-a', '/test-b', 'test-c'])
        ssmPromiseStub.calledWith({Names: ['/test-a', '/test-b', '/test-c'], WithDecryption: true})
    })

    it('returns an object containing the original name and resolved value', async () => {
        const resolve = await paramStore.getSSMParameters(['test-a', '/test-b', 'test-c'])
        resolve.should.eql({
            'test-a': 'resolved test-a',
            '/test-b': 'resolved test-b',
            'test-c': 'resolved test-c'
        })
    })
    it('throws an error if the param store returns any unresolved values', async () => {
        ssmPromiseStub.resolves({
            Parameters: [
                {
                    Name: '/foo/feedback/buzzbar/Buzzbar',
                    Type: 'String',
                    Value: 'vault://bar/foo/np/user-feedback/Buzz/bar',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T18:10:05.459Z',
                    ARN:
                        'arn:aws:ssm:us-east-1:accountnumber:parameter/foo/feedback/buzzbar/Buzzbar'
                }
            ],
            InvalidParameters: ['/foo/feedback/buzzbar/BuzzId', '/foo/feedback/buzzbar/url']
        })

        try {
            await paramStore.getSSMParameters([
                'foo/feedback/buzzbar/BuzzId',
                'foo/feedback/buzzbar/Buzzbar',
                '/foo/feedback/buzzbar/url'
            ])
        } catch (err) {
            err.message.should.eql(
                `The following AWS param store paths are invalid: /foo/feedback/buzzbar/BuzzId, /foo/feedback/buzzbar/url`
            )
        }
    })

    it('complex return', async () => {
        ssmPromiseStub.resolves({
            Parameters: [
                {
                    Name: '/foo/feedback/buzzbar/BuzzId',
                    Type: 'String',
                    Value: 'vault://bar/foo/np/user-feedback/Buzz/id',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T18:09:46.723Z',
                    ARN: 'arn:aws:ssm:us-east-1:accountnumber:parameter/foo/feedback/buzzbar/BuzzId'
                },
                {
                    Name: '/foo/feedback/buzzbar/Buzzbar',
                    Type: 'String',
                    Value: 'vault://bar/foo/np/user-feedback/Buzz/bar',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T18:10:05.459Z',
                    ARN:
                        'arn:aws:ssm:us-east-1:accountnumber:parameter/foo/feedback/buzzbar/Buzzbar'
                },
                {
                    Name: '/foo/feedback/buzzbar/url',
                    Type: 'String',
                    Value: 'some-url',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T18:10:42.575Z',
                    ARN: 'arn:aws:ssm:us-east-1:accountnumber:parameter/foo/feedback/buzzbar/url'
                },
                {
                    Name: '/foo/home/env',
                    Type: 'String',
                    Value: 'NonProd',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T16:46:49.240Z',
                    ARN: 'arn:aws:ssm:us-east-1:accountnumber:parameter/foo/home/env'
                },
                {
                    Name: '/foo/home/value',
                    Type: 'String',
                    Value: 'foo-tools-np.io',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T16:47:14.183Z',
                    ARN: 'arn:aws:ssm:us-east-1:accountnumber:parameter/foo/home/value'
                },
                {
                    Name: '/some-team/aws/admin/accessKeyId',
                    Type: 'String',
                    Value: 'vault://bar/some-team/np/common/aws/some-team-admin/accesskeyid',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T16:50:32.585Z',
                    ARN:
                        'arn:aws:ssm:us-east-1:accountnumber:parameter/some-team/aws/admin/accessKeyId'
                },
                {
                    Name: '/some-team/aws/admin/barAccessKey',
                    Type: 'String',
                    Value: 'vault://bar/some-team/np/common/aws/some-team-admin/baraccesskey',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T16:51:09.154Z',
                    ARN:
                        'arn:aws:ssm:us-east-1:accountnumber:parameter/some-team/aws/admin/barAccessKey'
                },
                {
                    Name: '/some-team/banana/apple',
                    Type: 'String',
                    Value:
                        'https://search-some-team-logs-np-pbxatmzszhbnhqbk6t3v7kl46m.us-east-1.es.amazonaws.com',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T18:13:14.290Z',
                    ARN: 'arn:aws:ssm:us-east-1:accountnumber:parameter/some-team/banana/apple'
                },
                {
                    Name: '/some-team/banana/region',
                    Type: 'String',
                    Value: 'us-east-1',
                    Version: 1,
                    LastModifiedDate: '2019-10-09T18:13:31.572Z',
                    ARN: 'arn:aws:ssm:us-east-1:accountnumber:parameter/some-team/banana/region'
                }
            ]
        })
        const resolve = await paramStore.getSSMParameters([
            'foo/home/value',
            'foo/home/env',
            'some-team/banana/apple',
            'some-team/banana/region',
            'some-team/aws/admin/accessKeyId',
            'some-team/aws/admin/barAccessKey',
            'foo/feedback/buzzbar/BuzzId',
            'foo/feedback/buzzbar/Buzzbar',
            'foo/feedback/buzzbar/url'
        ])

        resolve.should.eql({
            'foo/home/value': 'foo-tools-np.io',
            'foo/home/env': 'NonProd',
            'some-team/banana/apple':
                'https://search-some-team-logs-np-pbxatmzszhbnhqbk6t3v7kl46m.us-east-1.es.amazonaws.com',
            'some-team/banana/region': 'us-east-1',
            'some-team/aws/admin/accessKeyId':
                'vault://bar/some-team/np/common/aws/some-team-admin/accesskeyid',
            'some-team/aws/admin/barAccessKey':
                'vault://bar/some-team/np/common/aws/some-team-admin/baraccesskey',
            'foo/feedback/buzzbar/BuzzId': 'vault://bar/foo/np/user-feedback/Buzz/id',
            'foo/feedback/buzzbar/Buzzbar': 'vault://bar/foo/np/user-feedback/Buzz/bar',
            'foo/feedback/buzzbar/url': 'some-url'
        })
    })
})
