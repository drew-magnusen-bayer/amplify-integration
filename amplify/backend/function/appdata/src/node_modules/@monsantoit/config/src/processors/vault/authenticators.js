const VaultAwsAuth = require('vault-auth-aws')
const nodeVault = require('node-vault')
const urlParser = require('url')
const os = require('os')
const fs = require('fs')
const path = require('path')
const vaultCF = require('@monsantoit/vault-cf-services')

const withErrorHandler = async (callback) => {
    try {
        const resp = await callback()
        return resp
    } catch (err) {
        throw err
    }
}

const Option = async (label, task) => {
    let data
    let error
    try {
        data = await task()
    } catch (err) {
        error = err
    }
    return {label, data, error}
}

module.exports = {
    async getAWSClient(url, roleName) {
        return withErrorHandler(async () => {
            const {host} = urlParser.parse(url)
            if (!roleName) {
                throw new Error(`roleName is required, got: '${roleName}'`)
            } else if (typeof roleName !== 'string') {
                throw new Error(`roleName must be a string: '${JSON.stringify(roleName)}'`)
            }
            const vaultClient = new VaultAwsAuth({
                host,
                vaultAppName: roleName,
                ssl: true,
                port: 443
            })

            const {auth} = await vaultClient.authenticate()

            return nodeVault({
                apiVersion: 'v1',
                endpoint: url,
                token: auth.client_token
            })
        })
    },

    async getLocalTokenClient(url) {
        return withErrorHandler(async () => {
            const tokenPath = path.join(os.homedir(), `/.vault-token`)
            const token = fs.readFileSync(tokenPath, 'utf8')

            return nodeVault({
                apiVersion: 'v1',
                endpoint: url,
                token
            })
        })
    },

    async getAppRoleClient(url, roleId, secretId) {
        return withErrorHandler(async () =>
            vaultCF.getVault(url, {
                role_id: roleId,
                secret_id: secretId
            })
        )
    },

    async getAnyClient(url, auth) {
        const results = await Promise.all([
            Option('local vault token', () => this.getLocalTokenClient(url)),
            Option('appRole', () => this.getAppRoleClient(url, auth.roleId, auth.secretId)),
            Option('aws role', () => this.getAWSClient(url, auth.roleName))
        ])

        const success = results.find((r) => r.data !== null && r.data !== undefined)

        if (success) {
            console.info(`Authenticated via ${success.label}`)
            return success.data
        }

        results.forEach((r) => {
            if (r.error) {
                console.error(r.label, r.error)
            }
        })

        throw new Error(
            'Could not authenticate with vault via local vault token, approle credentials, or aws role. Please check your application configuration and try again. Tip: Run @monsantoit/config with the verbose flag to see configuration as it is processed.'
        )
    }
}
