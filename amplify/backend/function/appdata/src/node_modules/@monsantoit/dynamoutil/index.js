const AWS = require('aws-sdk')

const docClient = new AWS.DynamoDB.DocumentClient({ region: 'us-east-1' })
const _ = require('lodash')

exports.batchTypes = {
    PUT_REQUEST: 'PutRequest',
    DELETE_REQUEST: 'DeleteRequest',
    UPDATE_REQUEST: 'UpdateRequest'
}

Promise.delay = function (t, val) {
    console.log('delaying promise for', val)
    return new Promise(resolve => {
        setTimeout(resolve.bind(null, val), t)
    })
}

const batchWrite = (async (putRequests, tableName) => {
    const params = { RequestItems: { [`${tableName}`]: putRequests } }
    // eslint-disable-next-line no-return-await
    return await docClient.batchWrite(params, (e) => e && console.log(e)).promise()
})

exports.wipeTable = (async (tableName) => {
    const scanParams = {
        TableName: tableName,
        AttributesToGet: ['id'],
        Limit: '300'
    }

    const deleteParams = {
        TableName: tableName,
        Key: {
            id: ''
        }
    }
    let ids = []
    const getAllData = async (params) => {
        const data = await docClient.scan(params).promise()

        ids = data.Items.length ? ids = [...ids, ...data.Items] : ids

        if (data.LastEvaluatedKey) {
            params.ExclusiveStartKey = data.LastEvaluatedKey
            // eslint-disable-next-line no-return-await
            return await getAllData(params)
        }
        return data
    }
    try {
        await getAllData(scanParams)
        if (ids.length) {
            await Promise.all(
                ids.map(async (i) => {
                    deleteParams.Key.id = i.id
                    await docClient.delete(deleteParams, (e, d) => e && console.log(e)).promise()
                })
            )
        }
    } catch (error) {
        console.log(error)
    }
})
exports.batchUtil = async (requests, tableName) => {
    const chunkedRequests = _.chunk(requests, 25)
    // 25 is as many as you can write in one time
    const sentRequests = chunkedRequests.map(async (request) => {
        const [batchType] = Object.keys(request[0])
        switch (batchType) {
            case this.batchTypes.PUT_REQUEST:
                await batchWrite(request, tableName)
                break
            case this.batchTypes.DELETE_REQUEST:
                await batchDelete(request, tableName)
                break
            case this.batchTypes.UPDATE_REQUEST:
                await batchUpdate(request, tableName)
                break
            default:
                console.log('not a put request')
        }
    })
    await Promise.all(sentRequests)
}
