const moment = require('moment');
const objectHash = require('object-hash');
const agent = require('superagent');
const validateAppRoleVaultInfo = require('./validateAppRoleVaultInfo');
let cache = {};

function validateParameters(vaultUrl, credentials) {
	const error = validateAppRoleVaultInfo(vaultUrl, credentials);
	if (error) {
		throw new Error(`Unable to get AppRole vault token: ${error}`)
	}
}
function getAppRoleToken(vaultUrl, credentials) {
	validateParameters(vaultUrl, credentials);
	const cacheKey = objectHash({role_id: credentials.role_id, secret_id: credentials.secret_id});
	if(!cache[cacheKey]) {
		cache[cacheKey] = {};
	}

	function cacheResult(response) {
		const {auth} = response;
		const {lease_duration, client_token} = auth;
		cache[cacheKey].value = client_token;
		cache[cacheKey].expiration = moment().add(lease_duration - 30, 'seconds').valueOf();
		return cache[cacheKey].value;
	}
	if(cache[cacheKey].value && cache[cacheKey].expiration > Date.now()) {
		return Promise.resolve(cache[cacheKey].value);
	} else {
		return agent.post(`${vaultUrl}/v1/auth/approle/login`).send(credentials)
		.then(({body}) => {
			return cacheResult(body);
		}).catch((err) => {
			let reason = '';
			if (err.response && err.response.body && err.response.body.errors) {
				reason = err.response.body.errors[0];
			} else {
				reason = err;
			}
			throw new Error(`Unable to retrieve AppRole Vault token! Reason: ${reason}`)
		});
	}
}

module.exports = getAppRoleToken;

