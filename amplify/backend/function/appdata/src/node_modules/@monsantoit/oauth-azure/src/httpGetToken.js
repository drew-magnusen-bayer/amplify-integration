const moment = require('moment')
const objectHash = require('object-hash')
const oauthAPI = require('./oauthAPI')

const dependencies = {
    now: Date.now,
    state: {}
}

const cache = {}

const cacheResult = (key, response) => {
    const {now} = dependencies
    const {access_token, expires_in} = response.body

    cache[key].value = access_token

    // expire 30 seconds early to make sure our token is valid
    cache[key].expiration = moment(now())
        .add(expires_in - 30, 'seconds')
        .valueOf()

    cache[key].expires_in = expires_in

    return cache[key]
}

const httpGetToken = ({
    clientId,
    clientSecret,
    tenantId = 'fcb2b37b-5da0-466b-9b83-0014b67a7c78',
    url = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`,
    autoRefresh = true,
    refreshRate = 1000,
    scope = `${clientId}/.default`,
    logger = console
}) => (callback) => {
    const logError = (message, err) => {
        const actualLogger = !logger.error || typeof logger.error !== 'function' ? console : logger
        actualLogger.error(message, err)
    }
    const {now} = dependencies
    const {state} = dependencies

    const cacheKey = objectHash({clientId, clientSecret, url, scope})
    if (!cache[cacheKey]) {
        cache[cacheKey] = {}
    }
    if (!state[cacheKey]) {
        state[cacheKey] = {autoRefresh, refreshRate}
    }
    if (
        autoRefresh !== state[cacheKey].autoRefresh ||
        refreshRate !== state[cacheKey].refreshRate
    ) {
        clearTimeout(state[cacheKey].timeoutId)
        cache[cacheKey] = {}
        state[cacheKey].autoRefresh = autoRefresh
        state[cacheKey].refreshRate = refreshRate
    }

    if (cache[cacheKey].value && cache[cacheKey].expiration > now()) {
        const token = cache[cacheKey].value

        if (callback != null) {
            callback(null, token)
        }

        return Promise.resolve(token)
    } else if (state[cacheKey].promise) {
        return state[cacheKey].promise
    } else {
        const request = async () => {
            try {
                const response = await oauthAPI.receiveToken({clientId, clientSecret, url, scope})

                const {expires_in, value} = cacheResult(cacheKey, response)

                // autorefresh a little faster than manual refresh.
                if (state[cacheKey].autoRefresh) {
                    clearTimeout(state[cacheKey].timeoutId)
                    state[cacheKey].timeoutId = setTimeout(
                        () => request(),
                        (expires_in - 90) * state[cacheKey].refreshRate
                    )
                }
                return value
            } catch (err) {
                if (state[cacheKey].autoRefresh && err.statusCode !== 401) {
                    logError(
                        `Error occurred in @monsanto/oauth-azure retrieving oauth token: `,
                        err
                    )
                    clearTimeout(state[cacheKey].timeoutId)
                    state[cacheKey].timeoutId = setTimeout(
                        () => request(),
                        30 * state[cacheKey].refreshRate
                    )
                    return null
                } else {
                    throw err
                }
            }
        }

        const promise = async () => {
            try {
                const token = await request()
                delete state[cacheKey].promise

                if (callback != null) {
                    return callback(null, token)
                }
                return token
            } catch (err) {
                delete state[cacheKey].promise

                if (callback != null) {
                    return callback(err, null)
                }

                throw err
            }
        }

        state[cacheKey].promise = promise()

        return state[cacheKey].promise
    }
}

const refresh = {
    disable() {
        const {state} = dependencies
        Object.keys(state).forEach((key) => {
            delete state[key].autoRefresh
            clearTimeout(state[key].timeoutId)
        })
    }
}

module.exports = refresh

module.exports = Object.assign(httpGetToken, {dependencies, refresh, cache})
