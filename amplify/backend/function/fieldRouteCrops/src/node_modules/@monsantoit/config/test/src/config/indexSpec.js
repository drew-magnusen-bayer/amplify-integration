const {Config} = require('../../../src/index')

describe('config', () => {
    function noop() {
        return {}
    }

    function truthy() {
        return {test: true}
    }

    function nested() {
        return {deeply: {nested: {values: 'deeply nested value!'}}}
    }
    describe('construction', () => {
        it('sets the sources, processors, verbosity, initialized, and config properties', () => {
            const options = {
                sources: [noop],
                processors: [noop, noop],
                verbose: true,
                required: ['test']
            }

            const config = new Config(options)

            config.sources.should.eql(options.sources)
            config.processors.should.eql(options.processors)
            config.verbose.should.eql(options.verbose)
            config.required.should.eql(options.required)
            config.config.should.eql({})
            config.initalized.should.eql(false)
        })

        describe('validation', () => {
            it('uses reasonable defaults', () => {
                expect(() => new Config({})).not.to.throw()
            })

            it('rejects configuration when sources is not an array (of functions)', () => {
                expect(() => new Config({sources: false})).to.throw('"sources" must be an array')

                expect(() => new Config({sources: [false]})).to.throw(
                    '"sources" at position 0 fails because ["0" must be a Function]'
                )
            })

            it('rejects configuration when processors is not an array (of functions)', () => {
                expect(() => new Config({processors: false})).to.throw(
                    '"processors" must be an array'
                )

                expect(() => new Config({processors: [false]})).to.throw(
                    '"processors" at position 0 fails because ["0" must be a Function]'
                )
            })

            it('rejects configuration when required is not an array (of strings)', () => {
                expect(() => new Config({required: false})).to.throw('"required" must be an array')

                expect(() => new Config({required: [false]})).to.throw(
                    '"required" at position 0 fails because ["0" must be a string]'
                )
            })

            it('rejects configuration when verbose is not a boolean', () => {
                expect(() => new Config({verbose: 'what'})).to.throw('"verbose" must be a boolean')
            })
        })
    })

    describe('init', () => {
        it('runs through validation, returning a promise that provides a config', () => {
            const config = new Config({
                sources: [noop, truthy],
                processors: [],
                required: ['test']
            })

            return config.init().then((data) => {
                data.should.eql({test: true})
                config.initalized.should.equal(true)
            })
        })

        it('throws if any required keys are missing', () => {
            const config = new Config({
                sources: [noop],
                processors: [],
                required: ['test']
            })

            return config
                .init()
                .then(() => should.fail())
                .catch((err) => {
                    err.message.should.equal('"final configuration" does not contain [test]')
                })
        })
    })

    describe('get', () => {
        it('gets top level keys', () => {
            const config = new Config({
                sources: [noop, truthy],
                processors: [],
                required: ['test']
            })

            return config.init().then(() => {
                config.get('test').should.equal(true)
            })
        })

        it('gets deeply nested values', () => {
            const config = new Config({
                sources: [nested],
                processors: [],
                required: []
            })

            return config.init().then(() => {
                config.get('deeply.nested.values').should.equal('deeply nested value!')
            })
        })

        it('returns a default value if configuration is missing', () => {
            const config = new Config({
                sources: [],
                processors: [],
                required: []
            })

            return config.init().then(() => {
                config.get('missing.values', 'default').should.equal('default')
            })
        })
    })

    describe('set', () => {
        it('updates top level keys', () => {
            const config = new Config({
                sources: [noop, truthy],
                processors: [],
                required: ['test']
            })

            return config.init().then(() => {
                config.set('test', false).should.equal(false)
            })
        })

        it('updates deeply nested values', () => {
            const config = new Config({
                sources: [nested],
                processors: [],
                required: []
            })

            return config.init().then(() => {
                config.set('deeply.nested.values', 'something else').should.equal('something else')
            })
        })

        it('creates the config if no configuration is absent', () => {
            const config = new Config({
                sources: [],
                processors: [],
                required: []
            })

            return config.init().then(() => {
                config.set('missing.values', 'default').should.equal('default')
            })
        })
    })
})
