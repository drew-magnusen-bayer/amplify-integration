const sources = require('../../../src/sources/index')
const path = require('path')

describe('sources', () => {
    describe('fromJS', () => {
        it('evals a file', () => {
            sources
                .fromJS({src: path.resolve(__dirname, '../../files/example.js')})()
                .should.eql({
                    someKey: 'someJSValue'
                })
        })

        it('throws when it cannot resolve the path', () => {
            expect(sources.fromJS({src: './missing/files/example.js'})).to.throw(
                "Cannot find module './missing/files/example.js'"
            )
        })
    })

    describe('fromFile', () => {
        it('reads a json file', () =>
            sources
                .fromFile({src: path.resolve(__dirname, '../../files/example.json')})()
                .then((data) =>
                    data.should.eql({
                        someKey: 'someJSONvalue'
                    })
                ))

        it('reads a yml file', () =>
            sources
                .fromFile({src: path.resolve(__dirname, '../../files/example.yml')})()
                .then((data) =>
                    data.should.eql({
                        someKey: 'someYAMLValue'
                    })
                ))

        it('throws when it cannot resolve the path', () =>
            sources
                .fromFile({src: './missing/files/example.js'})()
                .then(() => should.fail())
                .catch((err) => err.message.should.include('ENOENT: no such file or directory')))
    })

    describe('fromEnvironment', () => {
        it('aliases env variables', () => {
            sources
                .fromEnvironment({env: 'NODE_ENV', alias: 'env'})()
                .should.eql({
                    env: 'test'
                })
        })

        it('puts in undefined when env variable does not exist', () => {
            sources
                .fromEnvironment({env: 'NOTEXIST', alias: 'env'})()
                .should.eql({
                    env: undefined
                })
        })

        it('transforms json if requested', () => {
            const obj = {
                str: 'value',
                arr: [1, 2, 3],
                obj: {ischild: true}
            }
            process.env.OBJECT_TEST = JSON.stringify(obj)
            sources
                .fromEnvironment({env: 'OBJECT_TEST', alias: 'obj', json: true})()
                .should.eql({obj})
        })

        it('throws if invalid json', () => {
            process.env.OBJECT_TEST = '{"bad":'
            try {
                sources.fromEnvironment({env: 'OBJECT_TEST', alias: 'obj', json: true})()
                should.fail()
            } catch (err) {
                err.message.should.include(
                    'Environment variable OBJECT_TEST is not valid JSON, but was requested to be parsed as such'
                )
            }
        })

        it('does not throw if requested json but variable does not exist', () => {
            sources
                .fromEnvironment({env: 'NOTEXIST', alias: 'obj', json: true})()
                .should.eql({obj: {}})
        })
    })
})
