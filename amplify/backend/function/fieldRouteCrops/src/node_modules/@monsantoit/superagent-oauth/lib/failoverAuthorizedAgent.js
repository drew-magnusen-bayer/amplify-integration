const agent = require("superagent")
const vaultAuthorizer = require("./vaultAuthorizer")
const { isEmpty, omit, pick } = require("lodash")

const getHeaders = (options) => {
  let headers = options && options.headers ? options.headers : {}
  if (!headers["content-type"]) {
    headers["content-type"] = "application/json"
  }
  return headers
}

const processOptions = (req, options) => {
  const headers = getHeaders(options)
  Object.keys(headers).forEach((headerName) => {
    req = req.set(headerName, headers[headerName])
  })
  return req
}

const invoke = async (request, options) => {
  try {
    const res = await processOptions(request, options)
    return handleResponse(res)
  } catch (error) {
    if (error.response) {
      return handleResponse(error.response)
    }
    throw error
  }
}

const handleResponse = (res) => {
  if (res.statusCode >= 400) {
    const message =
      res.text ||
      (isEmpty(res.body) ? `Response status code is ${res.statusCode}` : JSON.stringify(res.body))
    throw new Error(message)
  }
  return res
}

const getToken = async (opts) => {
  const params = {
    ...{
      clientId:
        opts.authProvider === "azure"
          ? process.env.AZURE_CLIENT_ID || process.env.CLIENT_ID
          : process.env.CLIENT_ID,
      environment: process.env.ENVIRONMENT,
      vaultSecretPath:
        opts.authProvider === "azure"
          ? process.env.AZURE_VAULT_SECRET_PATH || process.env.VAULT_SECRET_PATH
          : process.env.VAULT_SECRET_PATH,
      vaultRole:
        opts.authProvider === "azure"
          ? process.env.AZURE_VAULT_ROLE || process.env.VAULT_ROLE
          : process.env.VAULT_ROLE,
      clientSecret:
        opts.authProvider === "azure"
          ? process.env.AZURE_CLIENT_SECRET || process.env.CLIENT_SECRET
          : process.env.CLIENT_SECRET,
    },
    ...pick(
      opts,
      "authProvider",
      "clientId",
      "environment",
      "vaultSecretPath",
      "vaultRole",
      "clientSecret"
    ),
  }
  return await vaultAuthorizer.authorize(params)
}

const get = async function (url, options) {
  /* eslint-disable no-invalid-this */
  const token = await getToken({ ...this, ...options })
  const request = agent.get(url).set("Authorization", `${token}`)
  return await invoke(request, omit(options, "authProvider"))
}

const post = async function (url, options, body) {
  /* eslint-disable no-invalid-this */
  const token = await getToken({ ...this, ...options })
  const bodyToSend = body ? body : ""
  const request = agent.post(url).send(bodyToSend).set("Authorization", `${token}`)
  return await invoke(request, options)
}

const put = async function (url, options, body) {
  /* eslint-disable no-invalid-this */
  const token = await getToken({ ...this, ...options })
  const bodyToSend = body ? body : ""
  const request = agent.put(url).send(bodyToSend).set("Authorization", `${token}`)
  return await invoke(request, options)
}

const del = async function (url, options, body) {
  /* eslint-disable no-invalid-this */
  const token = await getToken({ ...this, ...options })
  const bodyToSend = body ? body : ""
  const request = agent.delete(url).send(bodyToSend).set("Authorization", `${token}`)
  return await invoke(request, options)
}

const patch = async function (url, options, body) {
  /* eslint-disable no-invalid-this */
  const token = await getToken({ ...this, ...options })
  const bodyToSend = body ? body : ""
  const request = agent.patch(url).send(bodyToSend).set("Authorization", `${token}`)
  return await invoke(request, options)
}

module.exports = {
  get,
  post,
  put,
  del,
  patch,
  getToken,
}
