const addAuthorization = require("../../lib/addAuthorization")
const chai = require("chai")
const expect = chai.expect
const randomString = require("random-string")

describe("addAuthorization", () => {
  describe("pingAuthorize", () => {
    it("throws when PING_URL missing", async () => {
      try {
        await addAuthorization.pingAuthorize({})
        throw new Error("Did not throw exception")
      } catch (error) {
        expect(error.message).to.equal(
          "PING_URL, CLIENT_ID, and CLIENT_SECRET parameters must be set"
        )
      }
    })

    it("throws when CLIENT_SECRET missing", async () => {
      try {
        await addAuthorization.pingAuthorize({ PING_URL: randomString() })
        throw new Error("Did not throw exception")
      } catch (error) {
        expect(error.message).to.equal(
          "PING_URL, CLIENT_ID, and CLIENT_SECRET parameters must be set"
        )
      }
    })

    it("throws when CLIENT_ID missing", async () => {
      try {
        await addAuthorization.pingAuthorize({
          PING_URL: randomString(),
          CLIENT_SECRET: randomString(),
        })
        throw new Error("Did not throw exception")
      } catch (error) {
        expect(error.message).to.equal(
          "PING_URL, CLIENT_ID, and CLIENT_SECRET parameters must be set"
        )
      }
    })
  })

  describe("azureAuthorize", () => {
    it("throws when AZURE_URL missing", async () => {
      try {
        await addAuthorization.azureAuthorize({})
        throw new Error("Did not throw exception")
      } catch (error) {
        expect(error.message).to.equal(
          "AZURE_URL, CLIENT_ID, and CLIENT_SECRET parameters must be set"
        )
      }
    })

    it("throws when CLIENT_SECRET missing", async () => {
      try {
        await addAuthorization.azureAuthorize({ AZURE_URL: randomString() })
        throw new Error("Did not throw exception")
      } catch (error) {
        expect(error.message).to.equal(
          "AZURE_URL, CLIENT_ID, and CLIENT_SECRET parameters must be set"
        )
      }
    })

    it("throws when CLIENT_ID missing", async () => {
      try {
        await addAuthorization.azureAuthorize({
          AZURE_URL: randomString(),
          CLIENT_SECRET: randomString(),
        })
        throw new Error("Did not throw exception")
      } catch (error) {
        expect(error.message).to.equal(
          "AZURE_URL, CLIENT_ID, and CLIENT_SECRET parameters must be set"
        )
      }
    })
  })
})
