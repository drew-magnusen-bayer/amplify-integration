type User @aws_iam @aws_api_key {
  id: ID
  shortName: String
  preferences: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Region @aws_iam @aws_api_key {
  id: ID
  regionID: ID
  region: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  PlantedDates(filter: ModelPlantedDateFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPlantedDateConnection @aws_iam @aws_api_key
}

type Country @aws_iam @aws_api_key {
  id: ID
  regionID: ID
  countryID: ID
  region: String
  country: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  PlantedDates(filter: ModelPlantedDateFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPlantedDateConnection @aws_iam @aws_api_key
}

type HomeSite @aws_iam @aws_api_key {
  id: ID
  regionID: ID
  countryID: ID
  homesiteID: ID
  region: String
  country: String
  homeSite: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  PlantedDates(filter: ModelPlantedDateFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPlantedDateConnection @aws_iam @aws_api_key
}

type Site @aws_iam @aws_api_key {
  id: ID
  regionID: ID
  countryID: ID
  homesiteID: ID
  siteID: ID
  region: String
  country: String
  homeSite: String
  site: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  PlantedDates(filter: ModelPlantedDateFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPlantedDateConnection @aws_iam @aws_api_key
}

type PlantedDate @aws_iam @aws_api_key {
  id: ID
  regionID: ID
  countryID: ID
  homesiteID: ID
  siteID: ID
  region: String
  country: String
  homeSite: String
  site: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  plantedDate: String
  plantedPlot: Int
  totalPlots: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type HarvestProgress @aws_iam @aws_api_key {
  id: ID
  compliance: String
  homeSite: String
  site: String
  priority: String
  harvestWindowStart: String
  harvestWindowEnd: String
  plots: Int
  percentHarvested: Int
  crop: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type HarvestProgressPie @aws_iam @aws_api_key {
  id: ID
  homeSite: String
  site: String
  compliance: String
  rating: Int
  plotCount: Int
  harvestPercentile: Int
  ratingDescription: String
  harvestedPlotCount: Int
  crop: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MachineData @aws_iam @aws_api_key {
  id: ID
  combine: String
  movementDate: String
  fromStation: String
  toStation: String
  drivingDistance: Int
  compliance: String
  crop: String
  acceptedDate: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  shortName: ModelStringInput
  preferences: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  getRegion(id: ID!): Region @aws_api_key @aws_iam
  listRegions(filter: ModelRegionFilterInput, limit: Int, nextToken: String): ModelRegionConnection @aws_api_key @aws_iam
  searchRegions(filter: SearchableRegionFilterInput, sort: SearchableRegionSortInput, limit: Int, nextToken: String, from: Int): SearchableRegionConnection @aws_api_key @aws_iam
  getCountry(id: ID!): Country @aws_api_key @aws_iam
  listCountrys(filter: ModelCountryFilterInput, limit: Int, nextToken: String): ModelCountryConnection @aws_api_key @aws_iam
  searchCountrys(filter: SearchableCountryFilterInput, sort: SearchableCountrySortInput, limit: Int, nextToken: String, from: Int): SearchableCountryConnection @aws_api_key @aws_iam
  getHomeSite(id: ID!): HomeSite @aws_api_key @aws_iam
  listHomeSites(filter: ModelHomeSiteFilterInput, limit: Int, nextToken: String): ModelHomeSiteConnection @aws_api_key @aws_iam
  searchHomeSites(filter: SearchableHomeSiteFilterInput, sort: SearchableHomeSiteSortInput, limit: Int, nextToken: String, from: Int): SearchableHomeSiteConnection @aws_api_key @aws_iam
  getSite(id: ID!): Site @aws_api_key @aws_iam
  listSites(filter: ModelSiteFilterInput, limit: Int, nextToken: String): ModelSiteConnection @aws_api_key @aws_iam
  searchSites(filter: SearchableSiteFilterInput, sort: SearchableSiteSortInput, limit: Int, nextToken: String, from: Int): SearchableSiteConnection @aws_api_key @aws_iam
  getPlantedDate(id: ID!): PlantedDate @aws_api_key @aws_iam
  listPlantedDates(filter: ModelPlantedDateFilterInput, limit: Int, nextToken: String): ModelPlantedDateConnection @aws_api_key @aws_iam
  searchPlantedDates(filter: SearchablePlantedDateFilterInput, sort: SearchablePlantedDateSortInput, limit: Int, nextToken: String, from: Int): SearchablePlantedDateConnection @aws_api_key @aws_iam
  getHarvestProgress(id: ID!): HarvestProgress @aws_api_key @aws_iam
  listHarvestProgresss(filter: ModelHarvestProgressFilterInput, limit: Int, nextToken: String): ModelHarvestProgressConnection @aws_api_key @aws_iam
  searchHarvestProgresss(filter: SearchableHarvestProgressFilterInput, sort: SearchableHarvestProgressSortInput, limit: Int, nextToken: String, from: Int): SearchableHarvestProgressConnection @aws_api_key @aws_iam
  getHarvestProgressPie(id: ID!): HarvestProgressPie @aws_api_key @aws_iam
  listHarvestProgressPies(filter: ModelHarvestProgressPieFilterInput, limit: Int, nextToken: String): ModelHarvestProgressPieConnection @aws_api_key @aws_iam
  searchHarvestProgressPies(filter: SearchableHarvestProgressPieFilterInput, sort: SearchableHarvestProgressPieSortInput, limit: Int, nextToken: String, from: Int): SearchableHarvestProgressPieConnection @aws_api_key @aws_iam
  getMachineData(id: ID!): MachineData @aws_api_key @aws_iam
  listMachineDatas(filter: ModelMachineDataFilterInput, limit: Int, nextToken: String): ModelMachineDataConnection @aws_api_key @aws_iam
  searchMachineDatas(filter: SearchableMachineDataFilterInput, sort: SearchableMachineDataSortInput, limit: Int, nextToken: String, from: Int): SearchableMachineDataConnection @aws_api_key @aws_iam
}

input CreateUserInput {
  id: ID
  shortName: String
  preferences: AWSJSON
}

input UpdateUserInput {
  id: ID!
  shortName: String
  preferences: AWSJSON
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createRegion(input: CreateRegionInput!, condition: ModelRegionConditionInput): Region @aws_api_key @aws_iam
  updateRegion(input: UpdateRegionInput!, condition: ModelRegionConditionInput): Region @aws_api_key @aws_iam
  deleteRegion(input: DeleteRegionInput!, condition: ModelRegionConditionInput): Region @aws_api_key @aws_iam
  createCountry(input: CreateCountryInput!, condition: ModelCountryConditionInput): Country @aws_api_key @aws_iam
  updateCountry(input: UpdateCountryInput!, condition: ModelCountryConditionInput): Country @aws_api_key @aws_iam
  deleteCountry(input: DeleteCountryInput!, condition: ModelCountryConditionInput): Country @aws_api_key @aws_iam
  createHomeSite(input: CreateHomeSiteInput!, condition: ModelHomeSiteConditionInput): HomeSite @aws_api_key @aws_iam
  updateHomeSite(input: UpdateHomeSiteInput!, condition: ModelHomeSiteConditionInput): HomeSite @aws_api_key @aws_iam
  deleteHomeSite(input: DeleteHomeSiteInput!, condition: ModelHomeSiteConditionInput): HomeSite @aws_api_key @aws_iam
  createSite(input: CreateSiteInput!, condition: ModelSiteConditionInput): Site @aws_api_key @aws_iam
  updateSite(input: UpdateSiteInput!, condition: ModelSiteConditionInput): Site @aws_api_key @aws_iam
  deleteSite(input: DeleteSiteInput!, condition: ModelSiteConditionInput): Site @aws_api_key @aws_iam
  createPlantedDate(input: CreatePlantedDateInput!, condition: ModelPlantedDateConditionInput): PlantedDate @aws_api_key @aws_iam
  updatePlantedDate(input: UpdatePlantedDateInput!, condition: ModelPlantedDateConditionInput): PlantedDate @aws_api_key @aws_iam
  deletePlantedDate(input: DeletePlantedDateInput!, condition: ModelPlantedDateConditionInput): PlantedDate @aws_api_key @aws_iam
  createHarvestProgress(input: CreateHarvestProgressInput!, condition: ModelHarvestProgressConditionInput): HarvestProgress @aws_api_key @aws_iam
  updateHarvestProgress(input: UpdateHarvestProgressInput!, condition: ModelHarvestProgressConditionInput): HarvestProgress @aws_api_key @aws_iam
  deleteHarvestProgress(input: DeleteHarvestProgressInput!, condition: ModelHarvestProgressConditionInput): HarvestProgress @aws_api_key @aws_iam
  createHarvestProgressPie(input: CreateHarvestProgressPieInput!, condition: ModelHarvestProgressPieConditionInput): HarvestProgressPie @aws_api_key @aws_iam
  updateHarvestProgressPie(input: UpdateHarvestProgressPieInput!, condition: ModelHarvestProgressPieConditionInput): HarvestProgressPie @aws_api_key @aws_iam
  deleteHarvestProgressPie(input: DeleteHarvestProgressPieInput!, condition: ModelHarvestProgressPieConditionInput): HarvestProgressPie @aws_api_key @aws_iam
  createMachineData(input: CreateMachineDataInput!, condition: ModelMachineDataConditionInput): MachineData @aws_api_key @aws_iam
  updateMachineData(input: UpdateMachineDataInput!, condition: ModelMachineDataConditionInput): MachineData @aws_api_key @aws_iam
  deleteMachineData(input: DeleteMachineDataInput!, condition: ModelMachineDataConditionInput): MachineData @aws_api_key @aws_iam
}

input ModelUserConditionInput {
  shortName: ModelStringInput
  preferences: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateRegion: Region @aws_subscribe(mutations: ["createRegion"]) @aws_api_key @aws_iam
  onUpdateRegion: Region @aws_subscribe(mutations: ["updateRegion"]) @aws_api_key @aws_iam
  onDeleteRegion: Region @aws_subscribe(mutations: ["deleteRegion"]) @aws_api_key @aws_iam
  onCreateCountry: Country @aws_subscribe(mutations: ["createCountry"]) @aws_api_key @aws_iam
  onUpdateCountry: Country @aws_subscribe(mutations: ["updateCountry"]) @aws_api_key @aws_iam
  onDeleteCountry: Country @aws_subscribe(mutations: ["deleteCountry"]) @aws_api_key @aws_iam
  onCreateHomeSite: HomeSite @aws_subscribe(mutations: ["createHomeSite"]) @aws_api_key @aws_iam
  onUpdateHomeSite: HomeSite @aws_subscribe(mutations: ["updateHomeSite"]) @aws_api_key @aws_iam
  onDeleteHomeSite: HomeSite @aws_subscribe(mutations: ["deleteHomeSite"]) @aws_api_key @aws_iam
  onCreateSite: Site @aws_subscribe(mutations: ["createSite"]) @aws_api_key @aws_iam
  onUpdateSite: Site @aws_subscribe(mutations: ["updateSite"]) @aws_api_key @aws_iam
  onDeleteSite: Site @aws_subscribe(mutations: ["deleteSite"]) @aws_api_key @aws_iam
  onCreatePlantedDate: PlantedDate @aws_subscribe(mutations: ["createPlantedDate"]) @aws_api_key @aws_iam
  onUpdatePlantedDate: PlantedDate @aws_subscribe(mutations: ["updatePlantedDate"]) @aws_api_key @aws_iam
  onDeletePlantedDate: PlantedDate @aws_subscribe(mutations: ["deletePlantedDate"]) @aws_api_key @aws_iam
  onCreateHarvestProgress: HarvestProgress @aws_subscribe(mutations: ["createHarvestProgress"]) @aws_api_key @aws_iam
  onUpdateHarvestProgress: HarvestProgress @aws_subscribe(mutations: ["updateHarvestProgress"]) @aws_api_key @aws_iam
  onDeleteHarvestProgress: HarvestProgress @aws_subscribe(mutations: ["deleteHarvestProgress"]) @aws_api_key @aws_iam
  onCreateHarvestProgressPie: HarvestProgressPie @aws_subscribe(mutations: ["createHarvestProgressPie"]) @aws_api_key @aws_iam
  onUpdateHarvestProgressPie: HarvestProgressPie @aws_subscribe(mutations: ["updateHarvestProgressPie"]) @aws_api_key @aws_iam
  onDeleteHarvestProgressPie: HarvestProgressPie @aws_subscribe(mutations: ["deleteHarvestProgressPie"]) @aws_api_key @aws_iam
  onCreateMachineData: MachineData @aws_subscribe(mutations: ["createMachineData"]) @aws_api_key @aws_iam
  onUpdateMachineData: MachineData @aws_subscribe(mutations: ["updateMachineData"]) @aws_api_key @aws_iam
  onDeleteMachineData: MachineData @aws_subscribe(mutations: ["deleteMachineData"]) @aws_api_key @aws_iam
}

type ModelRegionConnection @aws_api_key @aws_iam {
  items: [Region]!
  nextToken: String
}

input ModelRegionFilterInput {
  id: ModelIDInput
  regionID: ModelIDInput
  region: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelRegionFilterInput]
  or: [ModelRegionFilterInput]
  not: ModelRegionFilterInput
}

input CreateRegionInput {
  id: ID
  regionID: ID
  region: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input UpdateRegionInput {
  id: ID!
  regionID: ID
  region: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input DeleteRegionInput {
  id: ID!
}

input ModelRegionConditionInput {
  regionID: ModelIDInput
  region: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelRegionConditionInput]
  or: [ModelRegionConditionInput]
  not: ModelRegionConditionInput
}

type ModelCountryConnection @aws_api_key @aws_iam {
  items: [Country]!
  nextToken: String
}

input ModelCountryFilterInput {
  id: ModelIDInput
  regionID: ModelIDInput
  countryID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelCountryFilterInput]
  or: [ModelCountryFilterInput]
  not: ModelCountryFilterInput
}

input CreateCountryInput {
  id: ID
  regionID: ID
  countryID: ID
  region: String
  country: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input UpdateCountryInput {
  id: ID!
  regionID: ID
  countryID: ID
  region: String
  country: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input DeleteCountryInput {
  id: ID!
}

input ModelCountryConditionInput {
  regionID: ModelIDInput
  countryID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelCountryConditionInput]
  or: [ModelCountryConditionInput]
  not: ModelCountryConditionInput
}

type ModelHomeSiteConnection @aws_api_key @aws_iam {
  items: [HomeSite]!
  nextToken: String
}

input ModelHomeSiteFilterInput {
  id: ModelIDInput
  regionID: ModelIDInput
  countryID: ModelIDInput
  homesiteID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  homeSite: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelHomeSiteFilterInput]
  or: [ModelHomeSiteFilterInput]
  not: ModelHomeSiteFilterInput
}

input CreateHomeSiteInput {
  id: ID
  regionID: ID
  countryID: ID
  homesiteID: ID
  region: String
  country: String
  homeSite: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input UpdateHomeSiteInput {
  id: ID!
  regionID: ID
  countryID: ID
  homesiteID: ID
  region: String
  country: String
  homeSite: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input DeleteHomeSiteInput {
  id: ID!
}

input ModelHomeSiteConditionInput {
  regionID: ModelIDInput
  countryID: ModelIDInput
  homesiteID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  homeSite: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelHomeSiteConditionInput]
  or: [ModelHomeSiteConditionInput]
  not: ModelHomeSiteConditionInput
}

type ModelSiteConnection @aws_api_key @aws_iam {
  items: [Site]!
  nextToken: String
}

input ModelSiteFilterInput {
  id: ModelIDInput
  regionID: ModelIDInput
  countryID: ModelIDInput
  homesiteID: ModelIDInput
  siteID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  homeSite: ModelStringInput
  site: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelSiteFilterInput]
  or: [ModelSiteFilterInput]
  not: ModelSiteFilterInput
}

input CreateSiteInput {
  id: ID
  regionID: ID
  countryID: ID
  homesiteID: ID
  siteID: ID
  region: String
  country: String
  homeSite: String
  site: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input UpdateSiteInput {
  id: ID!
  regionID: ID
  countryID: ID
  homesiteID: ID
  siteID: ID
  region: String
  country: String
  homeSite: String
  site: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
}

input DeleteSiteInput {
  id: ID!
}

input ModelSiteConditionInput {
  regionID: ModelIDInput
  countryID: ModelIDInput
  homesiteID: ModelIDInput
  siteID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  homeSite: ModelStringInput
  site: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  and: [ModelSiteConditionInput]
  or: [ModelSiteConditionInput]
  not: ModelSiteConditionInput
}

type ModelPlantedDateConnection @aws_api_key @aws_iam {
  items: [PlantedDate]!
  nextToken: String
}

input ModelPlantedDateFilterInput {
  id: ModelIDInput
  regionID: ModelIDInput
  countryID: ModelIDInput
  homesiteID: ModelIDInput
  siteID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  homeSite: ModelStringInput
  site: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  plantedDate: ModelStringInput
  plantedPlot: ModelIntInput
  totalPlots: ModelIntInput
  and: [ModelPlantedDateFilterInput]
  or: [ModelPlantedDateFilterInput]
  not: ModelPlantedDateFilterInput
}

input CreatePlantedDateInput {
  id: ID
  regionID: ID
  countryID: ID
  homesiteID: ID
  siteID: ID
  region: String
  country: String
  homeSite: String
  site: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  plantedDate: String
  plantedPlot: Int
  totalPlots: Int
}

input UpdatePlantedDateInput {
  id: ID!
  regionID: ID
  countryID: ID
  homesiteID: ID
  siteID: ID
  region: String
  country: String
  homeSite: String
  site: String
  regionNames: [String]
  countryNames: [String]
  homeSiteNames: [String]
  siteNames: [String]
  crops: [String]
  experimentNames: [String]
  harvestTypes: [String]
  seasons: [String]
  trialTypes: [String]
  growingYears: [String]
  plantedDate: String
  plantedPlot: Int
  totalPlots: Int
}

input DeletePlantedDateInput {
  id: ID!
}

input ModelPlantedDateConditionInput {
  regionID: ModelIDInput
  countryID: ModelIDInput
  homesiteID: ModelIDInput
  siteID: ModelIDInput
  region: ModelStringInput
  country: ModelStringInput
  homeSite: ModelStringInput
  site: ModelStringInput
  regionNames: ModelStringInput
  countryNames: ModelStringInput
  homeSiteNames: ModelStringInput
  siteNames: ModelStringInput
  crops: ModelStringInput
  experimentNames: ModelStringInput
  harvestTypes: ModelStringInput
  seasons: ModelStringInput
  trialTypes: ModelStringInput
  growingYears: ModelStringInput
  plantedDate: ModelStringInput
  plantedPlot: ModelIntInput
  totalPlots: ModelIntInput
  and: [ModelPlantedDateConditionInput]
  or: [ModelPlantedDateConditionInput]
  not: ModelPlantedDateConditionInput
}

type ModelHarvestProgressConnection @aws_api_key @aws_iam {
  items: [HarvestProgress]!
  nextToken: String
}

input ModelHarvestProgressFilterInput {
  id: ModelIDInput
  compliance: ModelStringInput
  homeSite: ModelStringInput
  site: ModelStringInput
  priority: ModelStringInput
  harvestWindowStart: ModelStringInput
  harvestWindowEnd: ModelStringInput
  plots: ModelIntInput
  percentHarvested: ModelIntInput
  crop: ModelStringInput
  and: [ModelHarvestProgressFilterInput]
  or: [ModelHarvestProgressFilterInput]
  not: ModelHarvestProgressFilterInput
}

input CreateHarvestProgressInput {
  id: ID
  compliance: String
  homeSite: String
  site: String
  priority: String
  harvestWindowStart: String
  harvestWindowEnd: String
  plots: Int
  percentHarvested: Int
  crop: String
}

input UpdateHarvestProgressInput {
  id: ID!
  compliance: String
  homeSite: String
  site: String
  priority: String
  harvestWindowStart: String
  harvestWindowEnd: String
  plots: Int
  percentHarvested: Int
  crop: String
}

input DeleteHarvestProgressInput {
  id: ID!
}

input ModelHarvestProgressConditionInput {
  compliance: ModelStringInput
  homeSite: ModelStringInput
  site: ModelStringInput
  priority: ModelStringInput
  harvestWindowStart: ModelStringInput
  harvestWindowEnd: ModelStringInput
  plots: ModelIntInput
  percentHarvested: ModelIntInput
  crop: ModelStringInput
  and: [ModelHarvestProgressConditionInput]
  or: [ModelHarvestProgressConditionInput]
  not: ModelHarvestProgressConditionInput
}

type ModelHarvestProgressPieConnection @aws_api_key @aws_iam {
  items: [HarvestProgressPie]!
  nextToken: String
}

input ModelHarvestProgressPieFilterInput {
  id: ModelIDInput
  homeSite: ModelStringInput
  site: ModelStringInput
  compliance: ModelStringInput
  rating: ModelIntInput
  plotCount: ModelIntInput
  harvestPercentile: ModelIntInput
  ratingDescription: ModelStringInput
  harvestedPlotCount: ModelIntInput
  crop: ModelStringInput
  and: [ModelHarvestProgressPieFilterInput]
  or: [ModelHarvestProgressPieFilterInput]
  not: ModelHarvestProgressPieFilterInput
}

input CreateHarvestProgressPieInput {
  id: ID
  homeSite: String
  site: String
  compliance: String
  rating: Int
  plotCount: Int
  harvestPercentile: Int
  ratingDescription: String
  harvestedPlotCount: Int
  crop: String
}

input UpdateHarvestProgressPieInput {
  id: ID!
  homeSite: String
  site: String
  compliance: String
  rating: Int
  plotCount: Int
  harvestPercentile: Int
  ratingDescription: String
  harvestedPlotCount: Int
  crop: String
}

input DeleteHarvestProgressPieInput {
  id: ID!
}

input ModelHarvestProgressPieConditionInput {
  homeSite: ModelStringInput
  site: ModelStringInput
  compliance: ModelStringInput
  rating: ModelIntInput
  plotCount: ModelIntInput
  harvestPercentile: ModelIntInput
  ratingDescription: ModelStringInput
  harvestedPlotCount: ModelIntInput
  crop: ModelStringInput
  and: [ModelHarvestProgressPieConditionInput]
  or: [ModelHarvestProgressPieConditionInput]
  not: ModelHarvestProgressPieConditionInput
}

type ModelMachineDataConnection @aws_api_key @aws_iam {
  items: [MachineData]!
  nextToken: String
}

input ModelMachineDataFilterInput {
  id: ModelIDInput
  combine: ModelStringInput
  movementDate: ModelStringInput
  fromStation: ModelStringInput
  toStation: ModelStringInput
  drivingDistance: ModelIntInput
  compliance: ModelStringInput
  crop: ModelStringInput
  acceptedDate: ModelStringInput
  and: [ModelMachineDataFilterInput]
  or: [ModelMachineDataFilterInput]
  not: ModelMachineDataFilterInput
}

input CreateMachineDataInput {
  id: ID
  combine: String
  movementDate: String
  fromStation: String
  toStation: String
  drivingDistance: Int
  compliance: String
  crop: String
  acceptedDate: String
}

input UpdateMachineDataInput {
  id: ID!
  combine: String
  movementDate: String
  fromStation: String
  toStation: String
  drivingDistance: Int
  compliance: String
  crop: String
  acceptedDate: String
}

input DeleteMachineDataInput {
  id: ID!
}

input ModelMachineDataConditionInput {
  combine: ModelStringInput
  movementDate: ModelStringInput
  fromStation: ModelStringInput
  toStation: ModelStringInput
  drivingDistance: ModelIntInput
  compliance: ModelStringInput
  crop: ModelStringInput
  acceptedDate: ModelStringInput
  and: [ModelMachineDataConditionInput]
  or: [ModelMachineDataConditionInput]
  not: ModelMachineDataConditionInput
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchableRegionFilterInput {
  id: SearchableIDFilterInput
  regionID: SearchableIDFilterInput
  region: SearchableStringFilterInput
  regionNames: SearchableStringFilterInput
  countryNames: SearchableStringFilterInput
  homeSiteNames: SearchableStringFilterInput
  siteNames: SearchableStringFilterInput
  crops: SearchableStringFilterInput
  experimentNames: SearchableStringFilterInput
  harvestTypes: SearchableStringFilterInput
  seasons: SearchableStringFilterInput
  trialTypes: SearchableStringFilterInput
  growingYears: SearchableStringFilterInput
  and: [SearchableRegionFilterInput]
  or: [SearchableRegionFilterInput]
  not: SearchableRegionFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableRegionSortableFields {
  id
  regionID
  region
  regionNames
  countryNames
  homeSiteNames
  siteNames
  crops
  experimentNames
  harvestTypes
  seasons
  trialTypes
  growingYears
}

input SearchableRegionSortInput {
  field: SearchableRegionSortableFields
  direction: SearchableSortDirection
}

type SearchableRegionConnection @aws_api_key @aws_iam {
  items: [Region]!
  nextToken: String
  total: Int
}

input SearchableCountryFilterInput {
  id: SearchableIDFilterInput
  regionID: SearchableIDFilterInput
  countryID: SearchableIDFilterInput
  region: SearchableStringFilterInput
  country: SearchableStringFilterInput
  regionNames: SearchableStringFilterInput
  countryNames: SearchableStringFilterInput
  homeSiteNames: SearchableStringFilterInput
  siteNames: SearchableStringFilterInput
  crops: SearchableStringFilterInput
  experimentNames: SearchableStringFilterInput
  harvestTypes: SearchableStringFilterInput
  seasons: SearchableStringFilterInput
  trialTypes: SearchableStringFilterInput
  growingYears: SearchableStringFilterInput
  and: [SearchableCountryFilterInput]
  or: [SearchableCountryFilterInput]
  not: SearchableCountryFilterInput
}

enum SearchableCountrySortableFields {
  id
  regionID
  countryID
  region
  country
  regionNames
  countryNames
  homeSiteNames
  siteNames
  crops
  experimentNames
  harvestTypes
  seasons
  trialTypes
  growingYears
}

input SearchableCountrySortInput {
  field: SearchableCountrySortableFields
  direction: SearchableSortDirection
}

type SearchableCountryConnection @aws_api_key @aws_iam {
  items: [Country]!
  nextToken: String
  total: Int
}

input SearchableHomeSiteFilterInput {
  id: SearchableIDFilterInput
  regionID: SearchableIDFilterInput
  countryID: SearchableIDFilterInput
  homesiteID: SearchableIDFilterInput
  region: SearchableStringFilterInput
  country: SearchableStringFilterInput
  homeSite: SearchableStringFilterInput
  regionNames: SearchableStringFilterInput
  countryNames: SearchableStringFilterInput
  homeSiteNames: SearchableStringFilterInput
  siteNames: SearchableStringFilterInput
  crops: SearchableStringFilterInput
  experimentNames: SearchableStringFilterInput
  harvestTypes: SearchableStringFilterInput
  seasons: SearchableStringFilterInput
  trialTypes: SearchableStringFilterInput
  growingYears: SearchableStringFilterInput
  and: [SearchableHomeSiteFilterInput]
  or: [SearchableHomeSiteFilterInput]
  not: SearchableHomeSiteFilterInput
}

enum SearchableHomeSiteSortableFields {
  id
  regionID
  countryID
  homesiteID
  region
  country
  homeSite
  regionNames
  countryNames
  homeSiteNames
  siteNames
  crops
  experimentNames
  harvestTypes
  seasons
  trialTypes
  growingYears
}

input SearchableHomeSiteSortInput {
  field: SearchableHomeSiteSortableFields
  direction: SearchableSortDirection
}

type SearchableHomeSiteConnection @aws_api_key @aws_iam {
  items: [HomeSite]!
  nextToken: String
  total: Int
}

input SearchableSiteFilterInput {
  id: SearchableIDFilterInput
  regionID: SearchableIDFilterInput
  countryID: SearchableIDFilterInput
  homesiteID: SearchableIDFilterInput
  siteID: SearchableIDFilterInput
  region: SearchableStringFilterInput
  country: SearchableStringFilterInput
  homeSite: SearchableStringFilterInput
  site: SearchableStringFilterInput
  regionNames: SearchableStringFilterInput
  countryNames: SearchableStringFilterInput
  homeSiteNames: SearchableStringFilterInput
  siteNames: SearchableStringFilterInput
  crops: SearchableStringFilterInput
  experimentNames: SearchableStringFilterInput
  harvestTypes: SearchableStringFilterInput
  seasons: SearchableStringFilterInput
  trialTypes: SearchableStringFilterInput
  growingYears: SearchableStringFilterInput
  and: [SearchableSiteFilterInput]
  or: [SearchableSiteFilterInput]
  not: SearchableSiteFilterInput
}

enum SearchableSiteSortableFields {
  id
  regionID
  countryID
  homesiteID
  siteID
  region
  country
  homeSite
  site
  regionNames
  countryNames
  homeSiteNames
  siteNames
  crops
  experimentNames
  harvestTypes
  seasons
  trialTypes
  growingYears
}

input SearchableSiteSortInput {
  field: SearchableSiteSortableFields
  direction: SearchableSortDirection
}

type SearchableSiteConnection @aws_api_key @aws_iam {
  items: [Site]!
  nextToken: String
  total: Int
}

input SearchablePlantedDateFilterInput {
  id: SearchableIDFilterInput
  regionID: SearchableIDFilterInput
  countryID: SearchableIDFilterInput
  homesiteID: SearchableIDFilterInput
  siteID: SearchableIDFilterInput
  region: SearchableStringFilterInput
  country: SearchableStringFilterInput
  homeSite: SearchableStringFilterInput
  site: SearchableStringFilterInput
  regionNames: SearchableStringFilterInput
  countryNames: SearchableStringFilterInput
  homeSiteNames: SearchableStringFilterInput
  siteNames: SearchableStringFilterInput
  crops: SearchableStringFilterInput
  experimentNames: SearchableStringFilterInput
  harvestTypes: SearchableStringFilterInput
  seasons: SearchableStringFilterInput
  trialTypes: SearchableStringFilterInput
  growingYears: SearchableStringFilterInput
  plantedDate: SearchableStringFilterInput
  plantedPlot: SearchableIntFilterInput
  totalPlots: SearchableIntFilterInput
  and: [SearchablePlantedDateFilterInput]
  or: [SearchablePlantedDateFilterInput]
  not: SearchablePlantedDateFilterInput
}

enum SearchablePlantedDateSortableFields {
  id
  regionID
  countryID
  homesiteID
  siteID
  region
  country
  homeSite
  site
  regionNames
  countryNames
  homeSiteNames
  siteNames
  crops
  experimentNames
  harvestTypes
  seasons
  trialTypes
  growingYears
  plantedDate
  plantedPlot
  totalPlots
}

input SearchablePlantedDateSortInput {
  field: SearchablePlantedDateSortableFields
  direction: SearchableSortDirection
}

type SearchablePlantedDateConnection @aws_api_key @aws_iam {
  items: [PlantedDate]!
  nextToken: String
  total: Int
}

input SearchableHarvestProgressFilterInput {
  id: SearchableIDFilterInput
  compliance: SearchableStringFilterInput
  homeSite: SearchableStringFilterInput
  site: SearchableStringFilterInput
  priority: SearchableStringFilterInput
  harvestWindowStart: SearchableStringFilterInput
  harvestWindowEnd: SearchableStringFilterInput
  plots: SearchableIntFilterInput
  percentHarvested: SearchableIntFilterInput
  crop: SearchableStringFilterInput
  and: [SearchableHarvestProgressFilterInput]
  or: [SearchableHarvestProgressFilterInput]
  not: SearchableHarvestProgressFilterInput
}

enum SearchableHarvestProgressSortableFields {
  id
  compliance
  homeSite
  site
  priority
  harvestWindowStart
  harvestWindowEnd
  plots
  percentHarvested
  crop
}

input SearchableHarvestProgressSortInput {
  field: SearchableHarvestProgressSortableFields
  direction: SearchableSortDirection
}

type SearchableHarvestProgressConnection @aws_api_key @aws_iam {
  items: [HarvestProgress]!
  nextToken: String
  total: Int
}

input SearchableHarvestProgressPieFilterInput {
  id: SearchableIDFilterInput
  homeSite: SearchableStringFilterInput
  site: SearchableStringFilterInput
  compliance: SearchableStringFilterInput
  rating: SearchableIntFilterInput
  plotCount: SearchableIntFilterInput
  harvestPercentile: SearchableIntFilterInput
  ratingDescription: SearchableStringFilterInput
  harvestedPlotCount: SearchableIntFilterInput
  crop: SearchableStringFilterInput
  and: [SearchableHarvestProgressPieFilterInput]
  or: [SearchableHarvestProgressPieFilterInput]
  not: SearchableHarvestProgressPieFilterInput
}

enum SearchableHarvestProgressPieSortableFields {
  id
  homeSite
  site
  compliance
  rating
  plotCount
  harvestPercentile
  ratingDescription
  harvestedPlotCount
  crop
}

input SearchableHarvestProgressPieSortInput {
  field: SearchableHarvestProgressPieSortableFields
  direction: SearchableSortDirection
}

type SearchableHarvestProgressPieConnection @aws_api_key @aws_iam {
  items: [HarvestProgressPie]!
  nextToken: String
  total: Int
}

input SearchableMachineDataFilterInput {
  id: SearchableIDFilterInput
  combine: SearchableStringFilterInput
  movementDate: SearchableStringFilterInput
  fromStation: SearchableStringFilterInput
  toStation: SearchableStringFilterInput
  drivingDistance: SearchableIntFilterInput
  compliance: SearchableStringFilterInput
  crop: SearchableStringFilterInput
  acceptedDate: SearchableStringFilterInput
  and: [SearchableMachineDataFilterInput]
  or: [SearchableMachineDataFilterInput]
  not: SearchableMachineDataFilterInput
}

enum SearchableMachineDataSortableFields {
  id
  combine
  movementDate
  fromStation
  toStation
  drivingDistance
  compliance
  crop
  acceptedDate
}

input SearchableMachineDataSortInput {
  field: SearchableMachineDataSortableFields
  direction: SearchableSortDirection
}

type SearchableMachineDataConnection @aws_api_key @aws_iam {
  items: [MachineData]!
  nextToken: String
  total: Int
}
